{"version":3,"sources":["components/listItem.jsx","pages/notesList.jsx","pages/oneNote.jsx","App.js","index.js"],"names":["ListItem","note","className","to","id","body","length","slice","Date","updated","toLocaleTimeString","getTime","toLocaleDateString","getDate","style","color","NotesListPage","useState","notes","setNotes","useEffect","getNotes","a","fetch","response","json","data","fontSize","maxWidth","maxHeight","map","index","NotesPage","props","parameters","useParams","setNote","getNote","updateNote","method","headers","JSON","stringify","createNote","deleteNote","onClick","onChange","e","target","value","rows","cols","App","Width","height","minWidth","path","exact","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf0b11d9.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\n// To access a prop directly, like note, instead of props\r\n// const ListItem = (props) => {\r\n// do\r\n// const ListItem = ({note}) => {\r\nconst ListItem = ({ note }) => {\r\n    \r\n    let getTime = (note) => {\r\n\treturn new Date(note.updated).toLocaleTimeString() \r\n    }\r\n\r\n    let getDate = (note) => {\r\n        return new Date(note.updated).toLocaleDateString() \r\n    }\r\n\r\n    return (\r\n        <div className='my-2' >\r\n            <Link  to={`/note/${note.id}`} >\r\n                \r\n                <p className='my-3'>{note.body.length > 100 ? note.body.slice(0, 100) + \"...\" : note.body}</p>\r\n                <p className='text-sm text-gray-300 font-normal'>{ getTime(note) }<strong> | </strong>{ getDate(note) }</p>\r\n            </Link>\r\n            <hr style={{color:'white'}} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItem\r\n","import React, {useState,useEffect} from 'react'\r\nimport notes from '../assets/data'\r\nimport ListItem from '../components/listItem'\r\nimport '../App.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nconst NotesListPage = () => {\r\n\r\n    let [notes, setNotes] = useState([])\r\n\r\n    useEffect(() => {\r\n        getNotes()\r\n    }, [])\r\n\r\n    let getNotes = async () => {\r\n        let response = await fetch('/api/notes/')\r\n        let data = await response.json()\r\n        setNotes(data)\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className='relative'>\r\n            <div className='flex'>\r\n                <i className='fa fa-bars ' style={{fontSize:30}} ></i>\r\n                <h1 className='text-xl ml-2' style={{ fontSize: 30 }}>Safe Notes</h1>\r\n                \r\n                <span className='self-end ml-auto'>{notes.length}</span>\r\n                \r\n            </div>\r\n            <div className='mt-5 overflow-auto' style={{maxWidth:400,maxHeight:400}}>\r\n            {notes.map(\r\n                (note,index) => (\r\n                    <ListItem key={note.id} note={note} />\r\n                )\r\n            )}\r\n            </div>\r\n            <div className='addBtn'>\r\n                <Link to='/note/new'>\r\n                    <i className='fa fa-plus m-4' style={{fontSize:30}} ></i>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotesListPage\r\n\r\n\r\n","import React, {useState,useEffect} from 'react'\r\nimport { useParams, Link, Redirect } from 'react-router-dom'\r\n\r\nconst NotesPage = (props) => {\r\n    const parameters = useParams()\r\n    \r\n    let [note, setNote] = useState(null)\r\n\r\n    useEffect(() => {\r\n        getNote()\r\n    }, [])\r\n\r\n    let getNote = async () => {\r\n        if (parameters.id === 'new') return\r\n        let response = await fetch(`/api/notes/${parameters.id}`)\r\n        let data = await response.json()\r\n        setNote(data)\r\n    }\r\n\r\n    let updateNote = async () => {\r\n        fetch(`/api/notes/${parameters.id}/update`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(note)\r\n        }\r\n    )\r\n    }\r\n\r\n\r\n    let createNote = async () => {\r\n        fetch(`/api/notes/new/`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(note)\r\n        }\r\n    )\r\n    }\r\n\r\n\r\n\r\n\r\n    let deleteNote = async () => {\r\n        fetch(`/api/notes/${parameters.id}/delete`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            \r\n        })\r\n        // return <Redirect to='/' />\r\n    }\r\n    \r\n    \r\n    \r\n    let handleSubmit = () => {\r\n        if (parameters.id !== 'new' && !note.body){\r\n            deleteNote()\r\n        } else if (parameters.id != 'new'){\r\n            updateNote()\r\n        } else if (parameters.id == 'new' && note !== null){\r\n\t        createNote()\r\n        }\r\n        // return <Redirect to='/' />\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className='flex'>\r\n                <Link to='/'>\r\n                    <i className='fa fa-chevron-left' onClick={handleSubmit} style={{ fontSize: 30 }} ></i>\r\n                </Link>\r\n                <div className='self-end ml-auto'>\r\n                \r\n                {parameters.id !== 'new' ? (\r\n                    \r\n                    <Link to='/'>\r\n                        <i className='fa fa-close' onClick={deleteNote} style={{ fontSize: 30 }} ></i>\r\n                    </Link>\r\n                    \r\n                ) : (\r\n                    <Link to='/'>\r\n                        <i className='fa fa-check' onClick={createNote} style={{ fontSize: 30 }} ></i>\r\n                    </Link>    \r\n                )\r\n                \r\n                }\r\n                </div>\r\n\r\n                \r\n\r\n            </div>\r\n            <div className='mt-5'>\r\n                <textarea onChange={(e) => {setNote({...note,'body':e.target.value})}} className='bg-gray-800 overflow-auto resize-none' rows='15' cols=\"47\" value={note?.body}>\r\n\r\n                </textarea>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default NotesPage\r\n","import {\n  BrowserRouter as Router,\n  Route,\n  Routes\n} from \"react-router-dom\";\n\n\nimport './App.css';\nimport Header from './components/header'\nimport Body from './components/body'\nimport NotesListPage from './pages/notesList'\nimport NotesPage from './pages/oneNote'\n\nfunction App() {\n  return (\n    <Router>\n      <div className='bg-black h-screen flex item-center justify-center' >\n        <div className=' my-auto mx-auto bg-gray-800 focus rounded font-bold text-white' style={{Width:450,height:525, minWidth:450,maxWidth:450}}>\n          <div className='m-10' >\n            <Routes>\n              <Route path='/' exact element={<NotesListPage />} />\n              <Route exact path=\"/note/:id\" element={<NotesPage />} />\n            </Routes>\n          </div>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}